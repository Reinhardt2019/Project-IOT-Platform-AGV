# 以turtlesim为例理解ROS 2

## 安装turtlesim
注：turtlesim已经配置在本repository中的`turtlebot`文件夹中，可以直接使用`git clone`后
```
cd turtlebot
colcon build
```
在本地安装请参照如下步骤
```
sudo apt update
sudo apt install ros-galactic-turtlesim
```
运行`ros2 pkg executables turtlesim`检查是否完成安装，窗口应输出下列文件名
```
turtlesim draw_square
turtlesim mimic
turtlesim turtle_teleop_key
turtlesim turtlesim_node
```
## 运行turtlesim及控制面板
在命令行运行
```
ros2 run turtlesim turtlesim_node
```
打开一个新的终端，在命令行运行
```
ros2 run turtlesim turtle_teleop_key
```
在键盘上使用WASD或方向键可以控制小乌龟前进/旋转
## [理解节点(node)](https://docs.ros.org/en/galactic/Tutorials/Understanding-ROS2-Nodes.html)
每个ROS node代表单个模块化功能，node之间可以通过topics, services, actions或parameters传输数据。
### turtlesime中的节点
打开一个新的终端，在命令行内输入`ros2 node list`，终端会返回
```
/turtlesim
/teleop_turtle
```
在两个节点代表我们之前打开的窗口和控制面板。
继续运行`ros2 node info /turtlesim`,终端会返回正在与该节点交互的subscribers，publishers,services和actions.
```
/turtlesim
  Subscribers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /turtle1/cmd_vel: geometry_msgs/msg/Twist
  Publishers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /rosout: rcl_interfaces/msg/Log
    /turtle1/color_sensor: turtlesim/msg/Color
    /turtle1/pose: turtlesim/msg/Pose
  Service Servers:
    /clear: std_srvs/srv/Empty
    /kill: turtlesim/srv/Kill
    /reset: std_srvs/srv/Empty
    /spawn: turtlesim/srv/Spawn
    /turtle1/set_pen: turtlesim/srv/SetPen
    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute
    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative
    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters
    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes
    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters
    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters
    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters
    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically
  Service Clients:

  Action Servers:
    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute
  Action Clients:

```
## 节点之间的通信

### [Topics](https://docs.ros.org/en/galactic/Tutorials/Topics/Understanding-ROS2-Topics.html)
ROS 2中主题(Topics)原理及使用方法与其他通讯协议（如MQTT）一致。由publisher发布message，订阅该主题的subscribers能接收到信息。一个节点可以订阅多个不同的主题。一个主题也可以由不同的节点发布，也可以被多个不同的节点所订阅。

Message的基本结构为：
```
#message
<type> <name>
<type> <name>
<...>
---
```
上文中`/tuertelsim`的节点信息显示：
```
/turtlesim
  Subscribers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /turtle1/cmd_vel: geometry_msgs/msg/Twist
  Publishers:
    /parameter_events: rcl_interfaces/msg/ParameterEvent
    /rosout: rcl_interfaces/msg/Log
    /turtle1/color_sensor: turtlesim/msg/Color
    /turtle1/pose: turtlesim/msg/Pose
```
`Subscribers`下列出的主题是该节点所订阅（接收信息）的主题。如上列`/turtlesim`节点作为Subscriber，订阅了`/turtle1/cmd_vel`主题。
使用`ros2 topic echo <topic_name>`可以显示该主题传输的信息内容。输入`ros2 topic echo /turtle1/cmd_vel`，再打开`/teleop_turtle`（控制乌龟运动的面板）运行的终端，控制乌龟上下运动，可以看到`echo`返回的信息
```
linear:             #控制乌龟的线性运动
  x: 0.0
  y: 0.0
  z: 0.0
angular:            #控制乌龟的圆周运动
  x: 0.0
  y: 0.0
  z: -2.0
---
```
`Publishers`下列出的主题是该节点所发布（发出信息）的主题。如上列`/turtlesim`节点作为Publishers，发布了`/turtle1/pose: turtlesim/msg/Pose`主题。
`echo`该主题可以看到`/turtlesim`在不断发出小乌龟在幕布上的位置信息。
```
x: 5.544444561004639        #横坐标
y: 5.544444561004639
theta: 1.9311825037002563   #纵坐标
linear_velocity: 0.0        #线性运动速度
angular_velocity: 0.0       #圆周运动速度
---
```
我们得出控制乌龟运动的是`/turtle1/cmd_vel`主题，而`/teleop_turtle`的功能是将键盘输入的方向键转换成该信息并发布该主题信息。在此基础上，我们可以脱离`/teleop_turtle`，直接发布主题。在未运行任何节点的终端内输入
```
ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}"
```
可以看到窗口内小乌龟在进行圆周运动。
### [Services](https://docs.ros.org/en/galactic/Tutorials/Services/Understanding-ROS2-Services.html)
与Topics中一直传递的信息流不同，services代表服务器-客户机模型（C/S）是在客户机发布特定请求(request)后，服务器才会提供数据。

Service的结构为：
```
#request(from client to server)
<type> <name>
<type> <name>
<...>
---
#respond(from server to client)
<type> <name>
<type> <name>
<...>
```
上文中`/tuertelsim`的节点信息显示：
```
  Service Servers:
    /clear: std_srvs/srv/Empty
    /kill: turtlesim/srv/Kill
    /reset: std_srvs/srv/Empty
    /spawn: turtlesim/srv/Spawn
    /turtle1/set_pen: turtlesim/srv/SetPen
    /turtle1/teleport_absolute: turtlesim/srv/TeleportAbsolute
    /turtle1/teleport_relative: turtlesim/srv/TeleportRelative
    /turtlesim/describe_parameters: rcl_interfaces/srv/DescribeParameters
    /turtlesim/get_parameter_types: rcl_interfaces/srv/GetParameterTypes
    /turtlesim/get_parameters: rcl_interfaces/srv/GetParameters
    /turtlesim/list_parameters: rcl_interfaces/srv/ListParameters
    /turtlesim/set_parameters: rcl_interfaces/srv/SetParameters
    /turtlesim/set_parameters_atomically: rcl_interfaces/srv/SetParametersAtomically
  Service Clients:

```
上列service中，`/clear`清空屏幕上的所有画笔，`/spawn`在幕布上放置一只新的乌龟，`/set_pen`能够更改制定乌龟的画笔颜色及宽度。

与发布消息相同，我们可以在命令行中输入
```
ros2 service call <service_name> <service_type> <arguments>
```
请求执行特定service。其中`<arguments>`需要使用YAML格式。可以通过`ros2 interface show <type_name>`查看某一类services的参数类型。

以更改画笔颜色`/set_pen`为例，输入
```
ros2 service type /turtle1/set_pen
```
得到`/set_pen`的service类型为`turtlesim/srv/SetPen`，再运行
```
ros2 interface show turtlesim/srv/SetPen
```
终端会显示出该service的request及respond的类型
```
uint8 r
uint8 g
uint8 b
uint8 width
uint8 off
---
```
在此情况下，`---`下无内容代表服务端在运行结束后不会向用户端发送repond。最后，从终端发送运行`/set_pen`service的请求
```
ros2 service call /turtle1/set_pen turtlesim/srv/SetPen "{r: 242,b: 156, g: 177, width: 10}"
```
再控制小乌龟移动，可以看到画笔变成粉色。
### [Parameters](https://docs.ros.org/en/galactic/Tutorials/Parameters/Understanding-ROS2-Parameters.html)
在ROS2中，节点可以设置的参数类型有：integers,floats,booleans,strings,lists.所有节点都可以重新设置，并用于ROS2 services

使用`ros2 param list`可以查看当前节点拥有的参数，其中`/turtlesim`有如下参数:
```
/turtlesim:
  background_b
  background_g
  background_r
  qos_overrides./parameter_events.publisher.depth
  qos_overrides./parameter_events.publisher.durability
  qos_overrides./parameter_events.publisher.history
  qos_overrides./parameter_events.publisher.reliability
  use_sim_time
```
其中`background_r/b/g`分别代表背景的rgb颜色，使用
```
ros2 param get <node_name> <parameter_name>
```
可以查看对应参数的类型。如`ros2 param get /turtlesim background_g`会返回：
```
Integer value is: 86
```
由此可知`background_g`为interger类型的参数。这样，我们可以使用
```
ros2 param set <node_name> <parameter_name> <value>
```
在命令行输入`ros2 param set /turtlesim background_r 150`可以看到窗口颜色发生变化。

正在运行的节点的参数可以导出为`.yaml`
```
ros2 param dump <node_name>
```
同样的，可以通过预存文件将参数导入到正在运行的节点中
```
ros2 param load <node_name> <parameter_file>
```
如果需要在节点初始化的时候导入参数预设，可以使用
```
ros2 run <package_name> <executable_name> --ros-args --params-file <file_name>
```

### [Actions](https://docs.ros.org/en/galactic/Tutorials/Understanding-ROS2-Actions.html)


ROS2中Actions适用于一些长时间运行的任务。Action是通过topics和services实现的，其功能与services相似，不过action可以被取消。除此之外，action server可以不断为action client 提供稳定的反馈（feedback)，而service中server只能为client提供一次反馈。


Action的结构为：
```
#request
<type> <name>
<type> <name>
<...>
---
#result
<type> <name>
<type> <name>
<...>
---
#feedback
<type> <name>
<...>
```

打开新的终端窗口，输入
```
ros2 run turtlesim turtle_teleop_key
```

现在，我们可以通过键盘方向键或wasd键来控制乌龟在屏幕上的移动，也可以通过`G|B|V|C|D|E|R|T`来控制乌龟的转向，通过`F`取消。
按下`G|B|V|C|D|E|R|T`中的任意一个，当乌龟完成旋转后，可以看到终端窗口显示出此action的运行结果(result)
```
[INFO] [turtlesim]: Rotation goal completed successfully
```
代表该转向action的成功完成。而在旋转过程中按下`F`键，可以看到result信息变为
```
[INFO] [turtlesim]: Rotation goal canceled
```
此前，在`/turtlesim`的节点信息中，我们观察到与其相关的action有
```
  Action Servers:
    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute
  Action Clients:
```
现在，在新的窗口中输入`ros2 node info /teleop_turtle`
```
  Action Servers:

  Action Clients:
    /turtle1/rotate_absolute: turtlesim/action/RotateAbsolute

```
由此可见，action`turtlesim/action/RotateAbsolute` 实现了由`/teleop_turtle`节点控制`/turtlesim`中小乌龟运动的功能
