// Generated by gencpp from file delivery_navigation/ClientPoseResponse.msg
// DO NOT EDIT!


#ifndef DELIVERY_NAVIGATION_MESSAGE_CLIENTPOSERESPONSE_H
#define DELIVERY_NAVIGATION_MESSAGE_CLIENTPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace delivery_navigation
{
template <class ContainerAllocator>
struct ClientPoseResponse_
{
  typedef ClientPoseResponse_<ContainerAllocator> Type;

  ClientPoseResponse_()
    : succeed(false)  {
    }
  ClientPoseResponse_(const ContainerAllocator& _alloc)
    : succeed(false)  {
  (void)_alloc;
    }



   typedef uint8_t _succeed_type;
  _succeed_type succeed;





  typedef boost::shared_ptr< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ClientPoseResponse_

typedef ::delivery_navigation::ClientPoseResponse_<std::allocator<void> > ClientPoseResponse;

typedef boost::shared_ptr< ::delivery_navigation::ClientPoseResponse > ClientPoseResponsePtr;
typedef boost::shared_ptr< ::delivery_navigation::ClientPoseResponse const> ClientPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator1> & lhs, const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.succeed == rhs.succeed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator1> & lhs, const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delivery_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d9c3b918a0afafe09791ef8d7853918";
  }

  static const char* value(const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d9c3b918a0afafeULL;
  static const uint64_t static_value2 = 0x09791ef8d7853918ULL;
};

template<class ContainerAllocator>
struct DataType< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delivery_navigation/ClientPoseResponse";
  }

  static const char* value(const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool succeed\n"
"\n"
"\n"
;
  }

  static const char* value(const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.succeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClientPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delivery_navigation::ClientPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delivery_navigation::ClientPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "succeed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.succeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELIVERY_NAVIGATION_MESSAGE_CLIENTPOSERESPONSE_H
